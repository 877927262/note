1.阅读以下程序
		var stus = [{
			name:"terry",
			age:12,
			salary:3500,
			toString:function(){
				return 2;
			}
		},{
			name:"larry",
			age:17,
			salary:14500,
			toString:function(){
				return 21;
			}
		},{
			name:"tom",
			age:19,
			toString:function(){
				return 11;
			}
		}];

		1) 如果执行stus.sort();排序结果为何？为什么？
				
			如果调用sort方法时没有使用参数，将按照字母顺序对数组中的元素进行排序，是按照字符编码进行排序。
			这里调用了对象的toString()方法并进行排序


		2) 获取stus数组中年龄大于18岁的对象
			var stu=stus.filter(function(item){
				return item.age>18;
			});
			console.log(stu);

		3) 判断是否所有学生都有工资
			var sal =stus.every(function(item,index,stu ){
    			return item.salary;
   			})
   			console.log(sal)

   			或者:
			var stu=stus.map(function(item){
				return item.salary;
			});
			console.log(stu);//undefined即为没有工资


		4) 获取所有学生姓名组成的数组
			var stu=stus.map(function(item){
				return item.name;
			});
			console.log(stu);

		5) 如果执行
			var result = stus.filter(function(item){
				return item.age>15;
			});
			console.log("年龄大于15岁的学生有："+result);
			打印出来的结果为什么？为什么会出现这样的结果？
			打印结果：年龄大于15岁的学生有：21,11
			原因:进行字符串拼接，调用对象的toString()方法，将返回值与前面的字符串进行了拼接			
2. 你怎么理解回调函数
	回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。
3. 以下add函数的调用方式为几种？
	function add(a,b){
		alert(a+b);
	}
	三种：
	1.add(1,2);
	2.add.call(this,1,2);
	3.add.apply(this,[1,2]);
4. 阅读以下代码
	var a = 0;
	var obj1 = {a:1};
	var obj2 = {a:2};

	function test(){
		var a = 3;
		console.log(this.a+","+a);
	}

	1) 执行
		test();		输出结果为？ 为什么？
		0,3

		this.a指向window，因为是window调用了test()
		a指向的是函数内部的变量
	2) 执行 
		obj1.test = test;
		obj1.test();输出结果为？ 为什么？	

		1,3
		当前test()是调用的obj1中的test()函数，this.a指向obj1

	3) 执行 
		obj2.test = test;
		obj2.test();输出结果为？ 为什么？
		2,3
		同理，当前test()是obj2进行调用的，所以this.a指向obj2
	4) 执行 
		var show = test;
		show();		输出结果为？ 为什么？

		0,3
		show函数是window进行调用的，所以this.a指向window
5. 阅读以下程序
	function add(a,b){
		return a+b;
	}
	function del(a,b){
		return a-b;
	}

	function callMethod(method,arr){
		
	}
	var result = callMethod(add,1,2);	//result = 3
	var result = callMethod(del,1,2);	//result = -1

	要想让第86行代码和87行代码执行成功，callMethod方法应该怎么完善
		return method(a,b);
		return method.call(this,a,b);
		return method.apply(this,[a,b]);
6. 数组排序
		var stus = [{
			name:"terry",
			age:12,
			salary:3500,
			toString:function(){
				return 2;
			}
		},{
			name:"larry",
			age:17,
			salary:14500,
			toString:function(){
				return 21;
			}
		},{
			name:"tom",
			age:19,
			salary:5500,
			toString:function(){
				return 11;
			}
		}];

		1) 根据以下代码体现完成getComparator方法
			function getComparator(key){
			
			}
			stus.sort(getComparator("name"));	//按照姓名排序
			stus.sort(getComparator("age"));	//按照年龄排序
			stus.sort(getComparator("salary"));	//按照薪资排序
答案：

		function getComparator(key){
			return function(obj1,obj2){
				if(obj1[key]<obj2[key]){
				return -1;
			}else if(obj1[key]>obj2[key]){
				return 1;
				}
			}
		};
			

		console.log(stus.sort(getComparator("age")));

